data_value_names <- h5_value_col_names(h5File, key)
indices <- setdiff(names(data_list), c("index", names(data_value_names)))
df_index <- data.frame(data_list[indices])
df_values <- lapply(names(data_value_names), function(x)
mat_to_df(data_list[[x]], data_value_names[[x]]))
df <- do.call(cbind, c(list(df_index), df_values))
mat_to_df <- function(mat, mat_names){
if (length(dim(mat)) == 1){
mat <- matrix(data=mat, nrow=length(mat), ncol=length(mat_names))
}
else{
mat <- t(mat)
}
df <- as.data.frame(mat)
names(df) <- mat_names
df
}
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=FALSE)
data_value_names <- h5_value_col_names(h5File, key)
indices <- setdiff(names(data_list), c("index", names(data_value_names)))
df_index <- data.frame(data_list[indices])
df_values <- lapply(names(data_value_names), function(x)
mat_to_df(data_list[[x]], data_value_names[[x]]))
df <- do.call(cbind, c(list(df_index), df_values))
head(df)
head(read_hdf5_table(h5File, key))
read_hdf5_table <- function(h5File, key){
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=F)
data_value_names <- h5_value_col_names(h5File, key)
indices <- setdiff(names(data_list), c("index", names(data_value_names)))
df_index <- data.frame(data_list[indices])
df_values <- lapply(names(data_value_names), function(x)
mat_to_df(data_list[[x]], data_value_names[[x]]))
do.call(cbind, c(list(df_index), df_values))
}
head(read_hdf5_table(h5File, key))
library(rhdf5)
key <-  "data_sum"
h5File <- "/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/results/cvd_ihd_tmb_results_female.h5"
head(read_hdf5_table(h5File, key))
system.time(head(read_hdf5_table(h5File, key)))
system.time(fread("/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/results/cvd_ihd_tmb_results_female.csv"))
library("data.table")
system.time(fread("/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/results/cvd_ihd_tmb_results_female.csv"))
shiny::runApp('Documents/tmp/mortality_multiple')
folder <- gsub("[]", model, "/ihme/forecasting/data/cod_models/[]/results/")
model <- "20160805_all-cause-tests_edu-only_Global-secular"
folder <- gsub("[]", model, "/ihme/forecasting/data/cod_models/[]/results/")
folder <- gsub("[", model, "/ihme/forecasting/data/cod_models/[/results/")
folder <- gsub("{}", model, "/ihme/forecasting/data/cod_models/{}/results/")
folder <- gsub("\{\}", model, "/ihme/forecasting/data/cod_models/{}/results/")
folder <- gsub("\\{\\}", model, "/ihme/forecasting/data/cod_models/{}/results/")
folder
h5File <- paste0(folder, "cvd_ihd_tmb_results_female.h5")
csv <- paste0(folder, "cvd_ihd_tmb_results_female.csv")
head(read_hdf5_table(h5File, key))
head(fread(csv))
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
f = "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/cvd_ihd_male.h5"
df <- read_hdf5_table(f, "data")
f = "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/cvd_ihd_1.h5"
df <- read_hdf5_table(f, "data")
head(df)
h5File = "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/cvd_ihd_1.h5"
key <- "data"
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
attrib
cat(attrib$values_block_1_kind)
cat(attrib$values_block_2_kind)
cat(attrib$values_block_0_kind)
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
f2 <- '/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/squeezes/cvd_ihd_tmb_results_male.h5''
}}
''
f2 <- '/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/squeezes/cvd_ihd_tmb_results_male.h5'
key <- "data_sum"
df2 <- read_hdf5_table(f2, key)
h5File <- f2
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=F)
names(data_list)
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=F)
names(data_list)
df2 <- read_hdf5_table(f2, key)
head(df2)
runApp('Documents/tmp/mortality_multiple')
runApp('Documents/tmp/mortality_multiple')
library(rhdf5)
read_block_names <- function(str){
# Use string splitting to get the column names of a value block
split_vec <- strsplit(str, "'")[[1]]
N <- length(split_vec)
split_vec[seq(from=2, to=N, by=2)]
}
value_blocks <- function(attrib){
# get all the value block names from teh attributes of an hdf5 table
grep(glob2rx("values_block_*_kind"), names(attrib), value=TRUE)
}
h5_value_col_names <- function(h5File, key){
# return a list where each element are the column names of the differnt
# value block types i.e. float, int, string
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
value_block_names <- value_blocks(attrib)
nam <- lapply(value_block_names, function(x) read_block_names(attrib[[x]]))
names(nam) <- gsub("_kind", "", value_block_names)
nam
}
mat_to_df <- function(mat, mat_names){
# pytables hdf5 saves values as matrices when more than one column exists
# We need to transpose it then apply the names
if (length(dim(mat)) == 1){
mat <- matrix(data=mat, nrow=length(mat), ncol=length(mat_names))
}
else{
mat <- t(mat)
}
df <- as.data.frame(mat)
names(df) <- mat_names
df
}
read_hdf5_table <- function(h5File, key){
# read in the indices  values as well as the value blocks
# only indices values may be strings not sure why
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=F)
data_value_names <- h5_value_col_names(h5File, key)
indices <- setdiff(names(data_list), c("index", names(data_value_names)))
df_index <- data.frame(data_list[indices])
df_values <- lapply(names(data_value_names), function(x)
mat_to_df(data_list[[x]], data_value_names[[x]]))
do.call(cbind, c(list(df_index), df_values))
}
key <-  "data_sum"
model <- "20160805_all-cause-tests_edu-only_Global-secular"
folder <- gsub("\\{\\}", model, "/ihme/forecasting/data/cod_models/{}/results/")
h5File <- paste0(folder, "cvd_ihd_tmb_results_female.h5")
csv <- paste0(folder, "cvd_ihd_tmb_results_female.csv")
head(read_hdf5_table(h5File, key))
f1 <- "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/sids_1.h5"
f1 <- "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/draws/sids_1.h5"
head(read_hdf5_table(f1, "data"))
f1 <- "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/sids_1.h5"
f2 <- "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/draws/sids_1.h5"
head(read_hdf5_table(f1, "data"))
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
attrib
h5File <- "/ihme/forecasting/data/dalynator_gbd_2013_outputs/death/summary/sids_1.h5"
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
key <-  "data"
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
value_block_names <- value_blocks(attrib)
nam <- lapply(value_block_names, function(x) read_block_names(attrib[[x]]))
attrib
attrib$values_block_1_kind
strsplit(attrib$values_block_1_kind, "\n")
strsplit(attrib$values_block_1_kind, "'")
?strsplit
strsplit(attrib$values_block_1_kind, "\n")
strsplit(attrib$values_block_1_kind, "p[.]\n")
strsplit(attrib$values_block_1_kind, "p?.\n")
strsplit(attrib$values_block_1_kind, "p?.\n")[[0]]
strsplit(attrib$values_block_1_kind, "p?.\n")
strsplit(attrib$values_block_1_kind, "p?.\n")[[1]]
strsplit(attrib$values_block_1_kind, "p?.\n")[[1]][seq(2,9,2)]
strsplit(attrib$values_block_1_kind, "p.?\n")[[1]][seq(2,9,2)]
strsplit(attrib$values_block_1_kind, "p.?\n")[[1]]
attrib$values_block_1_kind
strsplit(attrib$values_block_1_kind, "\n")[[1]]
strsplit(attrib$values_block_1_kind, "\n")[[1]][seq(2,9,2)]
test <- strsplit(attrib$values_block_1_kind, "\n")[[1]][seq(2,9,2)]
test <- strsplit(attrib$values_block_1_kind, "\n")[[1]][seq(2,9,2)]
test
strsplit(test, "'")
sapply(strsplit(test), function(x) x[length(x)])
sapply(strsplit(test, "'"), function(x) x[length(x)])
attrib$values_block_1_kind
str <-
attrib$values_block_1_kind
str
strsplit(str, "\n")[[1]]
split_vec <- strsplit(str, "\n")[[1]]
length(split_vec)
attrib
key <-  "data"
library(rhdf5)
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
attrib
attrib$values_block_2_kind
attrib$values_block_1_kind
attrib$values_block_0_kind
str <- attrib$values_block_1_kind
strsplit(str, "\n")[[1]]
h5readAttributes(h5File, paste0(key, "/table/"))
h5ls(h5File)
h5readAttributes(h5File, paste0(key, "/table/"))
t1 <- h5read(h5File, "data")
t1 <- h5read(h5File, "data", compoundAsDataFrame=FALSE)
str(t1)
library(TMB)
library(TMB)
library(TMB)
library(TMB)
library(TMB)
library(TMB)
shiny::runApp('Documents/tmp/rmse_compare')
shiny::runApp('Documents/tmp/rmse_compare', launch.browser=TRUE)
shiny::runApp('Documents/tmp/rmse_compare', launch.browser=TRUE)
runApp('Documents/tmp/rmse_compare')
runApp('Documents/tmp/rmse_compare')
runApp('Documents/tmp/rmse_compare')
source('~/Documents/tmp/rmse_compare/utilities.R', echo=TRUE)
test <- read_model_rmse("20160822_all-cause-tests_LDI-only_Global-secular")
head(test)
runApp('Documents/tmp/rmse_compare')
runApp('Documents/tmp/rmse_compare')
test
test[,location_id]
test[,location_id] - test[,location_id]
test[,"location_id"] - test[,"location_id"]
test[,"location_id", with=F] - test[,"location_id", with=F]
test[,"test":="location_id" - "location_id", with=F]
test[,test:=location_id - location_id]
head(test)
test[,test:="location_id" - "location_id", with=F]
test[,test2:="location_id" - "location_id", with=F]
test[,"test2":="location_id" - "location_id", with=F]
test[,test:=location_id - location_id]
l = "location_id"
test[,test:=l - l]
test[,test:=l - l, with=F]
test[,"test":=l - l, with=F]
test[,"test":=(l) - (l)]
t = "test2"
test[,(t):=(l) - (l)]
l
test[,(t):=(l) - (l), with=F]
test[,(t):=get(l) - get(l), with=F]
test[,("test"):=get(l) - get(l)]
test[,("test"):=get("location_id") - get("location_id")]
head(test)
test[,("test3"):=get("location_id") - get("location_id")]
head(test)
df_ = test
metric <- "rmse"
sq <- paste0(metric, "_squeezed")
raw <- paste0(metric, "_modeled")
diff <- median((df_[raw] - df_[sq]) / df_[raw], na.rm=T)
diff <- median((df_[,get(raw)] - df_[,get(sq)]) / df_[,get(raw)], na.rm=T)
diff
diff1 <- median((df_$rmse_modeled - df_$rmse_squeezed) / df_$rmse_modeled, na.rm=T)
diff1
runApp('Documents/tmp/rmse_compare')
shiny::runApp('Documents/tmp/rmse_compare')
runApp('Documents/tmp/rmse_compare')
runApp('Documents/tmp/rmse_compare')
library(data.table)
?duplicated
?duplicated
base::duplicated
iris
base::duplicated(iris)
dplyr::duplicated(iris)
data.table::duplicated(iris)
duplicated(iris)
library(data.table)
?duplicated
base::duplicated(iris)
iris
?merge
library(rhdf5)
key <-  "data_sum"
h5File <- "/ihme/forecasting/data/cod_models/20160805_all-cause-tests_edu-only_Global-secular/results/cvd_ihd_tmb_results_female.h5"
read_block_names <- function(str){
# Use string splitting to get the column names of a value block
split_vec <- strsplit(str, "'")[[1]]
N <- length(split_vec)
split_vec[seq(from=2, to=N, by=2)]
}
value_blocks <- function(attrib){
# get all the value block names from teh attributes of an hdf5 table
grep(glob2rx("values_block_*_kind"), names(attrib), value=TRUE)
}
h5_value_col_names <- function(h5File, key){
# return a list where each element are the column names of the differnt
# value block types i.e. float, int, string
attrib <- h5readAttributes(h5File, paste0(key, "/table/"))
value_block_names <- value_blocks(attrib)
nam <- lapply(value_block_names, function(x) read_block_names(attrib[[x]]))
names(nam) <- gsub("_kind", "", value_block_names)
nam
}
mat_to_df <- function(mat, mat_names){
# pytables hdf5 saves values as matrices when more than one column exists
# We need to transpose it then apply the names
if (length(dim(mat)) == 1){
mat <- matrix(data=mat, nrow=length(mat), ncol=length(mat_names))
}
else{
mat <- t(mat)
}
df <- as.data.frame(mat)
names(df) <- mat_names
df
}
read_hdf5_table <- function(h5File, key){
# read in the indices  values as well as the value blocks
# only indeces values may be strings not sure why
data_list <- h5read(h5File, paste0(key, "/table/"), compoundAsDataFrame=F)
data_value_names <- h5_value_col_names(h5File, key)
indices <- setdiff(names(data_list), c("index", names(data_value_names)))
df_index <- data.frame(data_list[indices])
df_values <- lapply(names(data_value_names), function(x)
mat_to_df(data_list[[x]], data_value_names[[x]]))
do.call(cbind, c(list(df_index), df_values))
}
df = read_hdf5_table("/ihme/forecasting/data/death/rt/sids/1/20160906_initial_model_ensemble_run/forecast/ensemble_ensemble_model_description.hdf", "summary")
df = read_hdf5_table("/ihme/forecasting/data/death/rt/sids/1/20160912_past_draws/forecast/ensemble_ensemble_model_description.hdf", "summary")
df = read_hdf5_table("/ihme/forecasting/data/death/rt/sids/1/20160912_past_draws/forecast/ensemble_ensemble_model_description.hdf", "data")
head(df)
df = read_hdf5_table("/ihme/forecasting/data/death/rt/sids/1/20160912_new_scalars/forecast/ensemble_ensemble_model_description.hdf", "data")
tail(df)
df = read_hdf5_table("/ihme/forecasting/data/death/rt/sids/1/20160912_new_scalars/forecast/ensemble_ensemble_model_description.hdf", "summary")
1 / 2
1:3 [2]
1:3
(1:3)
(1:3)[1]
(1:3)[4]
(1:3)[7]
diag(6)
sigma_start <- .9
var_start <- sigma_start**2
N <- 50
var_series <- 1:N * var_start
sigma_series <- var_series**.5
plot(1:N, var_series)
plot(1:N, sigma_series)
plot(1:N, var_series)
plot(1:N, sigma_series)
rm(list=ls())
set.seed(124)
library(gee)
library(lme4)
library(mvtnorm)
library(ggplot2)
options(lmerControl=list(check.nobs.vs.rankZ = "warning",
check.nobs.vs.nlev = "warning",
check.nobs.vs.nRE = "warning",
check.nlev.gtreq.5 = "warning",
check.nlev.gtr.1 = "warning"))
# function for generating an AR1 precision and or var-covar matrix
ar1_matrix <- function(N, rho, sigma, vcov=FALSE){
mat <- matrix(data=0, nrow=N, ncol=N)
for(i in 2:N){
mat[i,i] <- (1. + rho**2) / sigma**2
mat[i-1,i] <- -rho / sigma**2
mat[i,i-1] <- -rho / sigma**2
}
for(i in c(1,N)){
mat[i,i] <- 1. / sigma**2
}
if(vcov){
mat <- solve(mat)
}
mat
}
# simulate an ar1 process
sim_ar1 <- function(N, rho, sigma){
vcov_mat <- ar1_matrix(N, rho, sigma, vcov=TRUE)
as.vector(rmvnorm(1, mean=rep(0, N), sigma=vcov_mat))
}
# sim data with known residual structure
N <- 1000
site_number <- 100
re_sigma <- 2
re_eff <- rnorm(site_number, sd=re_sigma)
site_number_sample <- sample(1:site_number, size=N, replace=TRUE)
site_eff <- re_eff[site_number_sample]
x1 <- rnorm(N, mean=6, sd=.4)
# beta coefficients
b0 <- 2
b1 <- -3
# generate the response variables
y <- b0 + b1 * x1 + site_eff + rnorm(N, sd=.2)
# put data into data frame for gee
data <- data.frame(y, x1, location=site_number_sample)
data <- data[order(data$location),]
# summaries of each model type
get_betas <- function(model){
if(isS4(model)){
b <- model@beta
}
else{
b <- model$coefficients
}
b
}
run_model <- function(fun=c(lm, lmer, gee), df=data,
ff=c("y ~ x1", "y ~ x1 + (1|location)", "y ~ x1"),
model_names=c("lm", "lmer", "gee"),
iterations=1000, res="unstructured"){
sample_sizes <- as.integer(seq(0, N , N/iterations))
# make sure samples are greater than 10
location <- df$location
sample_sizes <- sample_sizes[sample_sizes >= 10]
samples <- lapply(sample_sizes, function(x) sample(1:N, size=x))
M <- length(fun)
models <- lapply(1:M, function(x) t(sapply(samples, function(y)
get_betas(fun[[x]](ff[[x]], id=location, data=df[y,], corstr=res)))))
betas <- paste0("beta", 0:(ncol(models[[1]]) - 1))
results <- data.frame(do.call(rbind, models))
names(results) <- betas
results$sample_size <- rep(sample_sizes, M)
results$model <- rep(model_names, each=length(sample_sizes))
results
}
beta_results <- run_model()
run_model <- function(fun=c(lm, lmer, gee), df=data,
ff=c("y ~ x1", "y ~ x1 + (1|location)", "y ~ x1"),
model_names=c("lm", "lmer", "gee"),
iterations=100, res="unstructured"){
sample_sizes <- as.integer(seq(0, N , N/iterations))
# make sure samples are greater than 10
location <- df$location
sample_sizes <- sample_sizes[sample_sizes >= 10]
samples <- lapply(sample_sizes, function(x) sample(1:N, size=x))
M <- length(fun)
models <- lapply(1:M, function(x) t(sapply(samples, function(y)
get_betas(fun[[x]](ff[[x]], id=location, data=df[y,], corstr=res)))))
betas <- paste0("beta", 0:(ncol(models[[1]]) - 1))
results <- data.frame(do.call(rbind, models))
names(results) <- betas
results$sample_size <- rep(sample_sizes, M)
results$model <- rep(model_names, each=length(sample_sizes))
results
}
beta_results <- run_model()
# blackline is the true value
ggplot(data = beta_results, aes(x=sample_size, y=beta0, colour=model)) +
geom_line() + geom_abline(aes(slope=0, intercept=b0)) +
ggtitle("B0 estimates for Correct Residual Var Structure of LMER")
ggplot(data = beta_results, aes(x=sample_size, y=beta1, colour=model)) +
geom_line() + geom_abline(aes(slope=0, intercept=b1)) +
ggtitle("B1 estimates for Correct Residual Var Structure of LMER")
# now use the wrong covariance structure in the random effects model
ar1_rho <- .99
ar1_sigma <- .1
ar1_re_eff <- sim_ar1(site_number, ar1_rho, ar1_sigma)
qplot(1:site_number, ar1_re_eff, main="AR1 Correlation Over Time")
ar1_site_eff <- ar1_re_eff[site_number_sample]
b2 <- 1.5
# generate the response variables
y2 <- b0 + b1 * x1 + b2 * site_number_sample + ar1_site_eff + rnorm(N, sd=.2)
data2 <- data.frame(y, y2, x1, location=site_number_sample)
data2 <- data2[order(data2$location),]
beta_results2 <- run_model(df=data2,
ff=c("y2 ~ x1 + location",
"y2 ~ x1 + location + (1|location)",
"y2 ~ x1 + location"))
# summaries of each model type
ggplot(data = beta_results2, aes(x=sample_size, y=beta0, colour=model)) +
geom_line() + geom_abline(aes(slope=0, intercept=b0)) +
ggtitle("B0 estimates for Incorrect Residual Var Structure of LMER")
ggplot(data = beta_results2, aes(x=sample_size, y=beta1, colour=model)) +
geom_line() + geom_abline(aes(slope=0, intercept=b1)) +
ggtitle("B1 estimates for Incorrect Residual Var Structure of LMER")
ggplot(data = beta_results2, aes(x=sample_size, y=beta2, colour=model)) +
geom_line() + geom_abline(aes(slope=0, intercept=b2)) +
ggtitle("B2 estimates for Incorrect Residual Var Structure of LMER")
source('~/Documents/re_simulations/gee_test/gee_mm.R', echo=TRUE)
warnings()
sample.data <- rnorm(N, mean=mu, sd=sigma)
rm(list=ls())
set.seed(123)
# true population mean
mu <- 3
# true population standard deviation
sigma <- .2
# sample size
N <- 1000
# given the true parameters of the population take a sample
# we will assume a normal distribution
sample.data <- rnorm(N, mean=mu, sd=sigma)
mean(sample.data)
sd(sample.data)
sd(sample.data) / sqrt(N)
# standard deviation vs standard error
rm(list=ls())
set.seed(123)
# true population mean
mu <- 3
# true population standard deviation
sigma <- .2
# sample size
N <- 1000
# given the true parameters of the population take a sample
# we will assume a normal distribution
sample.data <- rnorm(N, mean=mu, sd=sigma)
# this is the estimated population mean from the sample which is a sample statistic
mean(sample.data)
# this is the estimated population sd from the sample
sd(sample.data)
# this is the standard error of the mean
# which is the standard deviation of the sample mean
sd(sample.data) / sqrt(N)
sigma / sqrt(N)
sd(sample.data) / sqrt(N)
setwd("~/Documents/re_simulations/simple_reg_tmb/")
library(TMB)
