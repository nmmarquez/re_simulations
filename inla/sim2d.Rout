
> sink(output_file, type="message")

> pacman::p_load(INLA, ggplot2, data.table, lattice, TMB, ar.matrix, MASS)

> set.seed(123)

> # compare the INLA Q matrix vs the by hand to make sure we are on the same page
> # use inla to create the model and make sure results match TMB
> 
 .... [TRUNCATED] 

> n <- 500 # number of observations on the grid

> m <- 12 # number of time points

> loc <- matrix(runif(n*2), n, 2) # simulate observed points

> mesh <- inla.mesh.create(loc, refine=list(max.edge=0.05)) # create mesh

> jpeg("~/Documents/re_simulations/inla/mesh.jpg")

> par(mfrow=c(1,1))

> plot(mesh)

> points(loc[,1], loc[,2], col="red", pch=20)

> dev.off()
null device 
          1 

> # project mesh using inla default projection
> proj <- inla.mesh.projector(mesh)

> sigma0 <-  .3   # Standard deviation

> range0 <- 1. # Spatial range

> kappa0 <- sqrt(8)/range0 # inla paramter transform

> tau0 <- 1/(sqrt(4*pi)*kappa0*sigma0) # inla parameter transform

> rho <- .91 # tenporal autocorrelation

> spde <- inla.spde2.matern(mesh) # create the spde from the mesh

> # parameterize the spde and get the projected precision matrix
> Q1 <- inla.spde2.precision(spde, theta=c(log(tau0), log(kappa0)))
Note: method with signature ‘diagonalMatrix#sparseMatrix’ chosen for function ‘%*%’,
 target signature ‘ddiMatrix#dgTMatrix’.
 "Matrix#TsparseMatrix" would also be valid
Note: method with signature ‘TsparseMatrix#Matrix’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#ddiMatrix’.
 "sparseMatrix#diagonalMatrix" would also be valid

> # calculate the precision matrix by hand in order to make sure you got the
> # process down for TMB
> Q2 <- tau0**2 * (kappa0**4 * spde$param.inla$M .... [TRUNCATED] 

> # Should all be equal
> print(all.equal(Q1, Q2))
[1] TRUE

> # # simulate m sets from the precision matrix had no idea INLA had this!!!
> # x.m <- inla.qsample(n=m, Q1)
> # 
> # # use the janky sim code found  .... [TRUNCATED] 
Note: method with signature ‘dsparseMatrix#dsparseMatrix’ chosen for function ‘kronecker’,
 target signature ‘dgTMatrix#dgCMatrix’.
 "TsparseMatrix#sparseMatrix" would also be valid

> x_ <- matrix(data=c(sim.AR(1, Q)), nrow=mesh$n, ncol=m)

> # lets only take the observed mesh not the whole set
> x <- x_[mesh$idx$loc,]

> # plot using the above websites code
> c100 <- rainbow(101)

> jpeg("~/Documents/re_simulations/inla/pointplot.jpg")

> par(mfrow=c(4,3), mar=c(0,0,0,0))

> for (j in 1:m)
+     plot(loc, col=c100[round(100*(x[,j]-min(x[,j]))/diff(range(x[,j])))], 
+          axes=FALSE, asp=1, pch=19, cex=0.5)

> dev.off()
null device 
          1 

> # plot using our use defined code to see the whole surface
> for (j in 1:m){
+    print(plot_mesh_sim(x_[,j], proj) + labs(title=paste0("Time: ", j) .... [TRUNCATED] 

> # lets build up a linear model with dummies to estimate
> table(ccov <- factor(sample(LETTERS[1:3], n*m, replace=TRUE)) )

   A    B    C 
2050 1969 1981 

> beta <- -1:1

> sd.y <- 0.1

> y <- beta[unclass(ccov)] + x + rnorm(n*m, 0, sd.y)

> tapply(y, ccov, mean)
         A          B          C 
-0.8004841  0.2047530  1.2052436 

> isel <- sample(1:(n*m), n*m/2)

> dat <- data.table(y=as.vector(y), w=ccov, 
+                   time=rep(1:m, each=n) - 1, 
+                   xcoo=rep(loc[,1], m), 
+              .... [TRUNCATED] 

> # build the inla stuff that Im not 100 % sure what it does but theres a 
> # projector matrix and some priors and the most stacked lists uve ever se .... [TRUNCATED] 

> A <- inla.spde.make.A(mesh=mesh, 
+                       loc=cbind(dat$xcoo, dat$ycoo), 
+                       group=dat$time+1) 

> sdat <- inla.stack(tag='stdata', data=list(y=dat$y), 
+                    A=list(A,1),  effects=list(iset, w=dat$w)) 

> h.spec <- list(theta=list(prior='pccor1', param=c(0, 0.9)))

> formulae <- y ~ 0 + w + 
+     f(i, model=spde, group=i.group, 
+       control.group=list(model='ar1', hyper=h.spec)) 

> prec.prior <- list(prior='pc.prec', param=c(1, 0.01))

> # Run the inla model and time it
> print(system.time(res <- inla(formulae,  data=inla.stack.data(sdat),
+                     control.predictor=list .... [TRUNCATED] 
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘Matrix#numLike’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#numeric’.
 "TsparseMatrix#ANY" would also be valid
Note: method with signature ‘sparseMatrix#matrix’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#matrix’.
 "TsparseMatrix#ANY" would also be valid
    user   system  elapsed 
6830.500  221.608 2663.511 

> # 2440(7018.576) seconds run time
> summary(res)

Call:
c("inla(formula = formulae, data = inla.stack.data(sdat), control.compute = list(config = TRUE), ",  "    control.predictor = list(compute = TRUE, A = inla.stack.A(sdat)), ",  "    control.family = list(hyper = list(theta = prec.prior)), ",  "    control.fixed = list(expand.factor.strategy = \"inla\"))" )

Time used:
 Pre-processing    Running inla Post-processing           Total 
         1.1105       2656.6303          5.7059       2663.4467 

Fixed effects:
     mean     sd 0.025quant 0.5quant 0.975quant    mode kld
A -0.8647 0.7081    -2.2759  -0.8641     0.5415 -0.8629   0
B  0.1317 0.7081    -1.2795   0.1323     1.5379  0.1335   0
C  1.1305 0.7081    -0.2807   1.1311     2.5367  1.1323   0

Random effects:
Name	  Model
 i   SPDE2 model 

Model hyperparameters:
                                            mean     sd 0.025quant 0.5quant 0.975quant     mode
Precision for the Gaussian observations 104.7538 3.9735    97.0772 104.7126   112.6977 104.6646
Theta1 for i                             -2.0143 0.0368    -2.0859  -2.0147    -1.9415  -2.0156
Theta2 for i                              0.9944 0.0902     0.8148   0.9953     1.1695   0.9979
GroupRho for i                            0.9213 0.0079     0.9045   0.9217     0.9357   0.9226

Expected number of effective parameters(std dev): 1005.31(32.53)
Number of equivalent replicates : 2.984 

Marginal log-Likelihood:  1498.23 
Posterior marginals for linear predictor and fitted values computed


> # now run the TMB model using ./st.cpp
> setwd("~/Documents/re_simulations/inla/")

> # compile the code if not there
> model <- "st"

> if (file.exists(paste0(model, ".so"))) file.remove(paste0(model, ".so"))
[1] TRUE

> if (file.exists(paste0(model, ".o"))) file.remove(paste0(model, ".o"))
[1] TRUE

> if (file.exists(paste0(model, ".dll"))) file.remove(paste0(model, ".dll"))

> compile(paste0(model, ".cpp"))
Note: Using Makevars in /home/nmarquez/.R/Makevars 
[1] 0

> # set the data
> Data <- list(y=dat$y, T=m, geo=dat$geo, temporal=dat$time,
+              cov=sapply(c("A", "B", "C"), function(x) as.integer(x ==  .... [TRUNCATED] 

> # set the param starting points
> Params <- list(logtau=0, logsigma=0, logitrho=0, logkappa=0, beta=c(0,0,0),
+                phi=array(0, dim=c(nr .... [TRUNCATED] 

> # load and optimize
> dyn.load(dynlib(model))

> Obj <- MakeADFun(data=Data, parameters=Params, DLL=model, random="phi")
Order of parameters:
[1] "logtau"   "logsigma" "logitrho" "logkappa" "beta"     "phi"     
Not matching template order:
[1] "beta"     "logtau"   "logkappa" "logitrho" "logsigma" "phi"     
Your parameter list has been re-ordered.
(Disable this warning with checkParameterOrder=FALSE)

> runSymbolicAnalysis(Obj)
Entering externallib 
cholmod_analyze: status=0 
Chosen ordering 6 
Running symbolic analysis 
User permutation 
Chosen ordering 0 
Length of supernodal xslot 12878420 
Flopcount 8613066071.000000 
Fill-in ratio (nnz(L)/nnz(Q)) 20.932590 
Factor xtype 0 
Running numerical factorization 
Done 
NULL

> print(system.time(Opt <- nlminb(start=Obj$par, objective=Obj$fn,
+                                 gradient=Obj$gr,
+                                .... [TRUNCATED] 
iter: 1  value: -80885.29 mgc: 4.470591 ustep: 1 
iter: 2  mgc: 1.444574e-09 
iter: 1  mgc: 1.444574e-09 
Matching hessian patterns... Done
outer mgc:  981.847 
iter: 1  value: -81622.75 mgc: 2.222252 ustep: 1 
iter: 2  mgc: 1.05961e-09 
iter: 1  value: -32261.63 mgc: 55.40493 ustep: 1 
iter: 2  mgc: 1.626152e-09 
iter: 1  mgc: 1.05961e-09 
outer mgc:  1810.619 
iter: 1  value: -75044.58 mgc: 103.0747 ustep: 1 
iter: 2  mgc: 1.050077e-09 
iter: 1  value: -82092.24 mgc: 3.838174 ustep: 1 
iter: 2  mgc: 9.620011e-10 
iter: 1  mgc: 9.620011e-10 
outer mgc:  1623.053 
iter: 1  value: -80799.55 mgc: 21.66196 ustep: 1 
iter: 2  mgc: 8.544315e-10 
iter: 1  mgc: 8.544315e-10 
outer mgc:  4356.602 
iter: 1  value: -74774.04 mgc: 12.29 ustep: 1 
iter: 2  mgc: 1.101908e-09 
iter: 1  mgc: 1.101908e-09 
outer mgc:  4919.113 
iter: 1  value: -68227.65 mgc: 10.96021 ustep: 1 
iter: 2  mgc: 6.686278e-10 
iter: 1  mgc: 6.686278e-10 
outer mgc:  2448.049 
iter: 1  value: -68722.04 mgc: 22.68562 ustep: 1 
iter: 2  mgc: 3.927298e-10 
iter: 1  value: -68534.2 mgc: 3.886439 ustep: 1 
iter: 2  mgc: 7.013302e-10 
iter: 1  mgc: 7.013302e-10 
outer mgc:  1531.1 
iter: 1  value: -68672.06 mgc: 4.628092 ustep: 1 
iter: 2  mgc: 6.543846e-10 
iter: 1  value: -68648.01 mgc: 27.71225 ustep: 1 
iter: 2  mgc: 3.236395e-10 
iter: 1  mgc: 3.236395e-10 
outer mgc:  2670.455 
iter: 1  value: -60152.53 mgc: 43.86636 ustep: 1 
iter: 2  mgc: 1.871859e-10 
iter: 1  value: -68458.96 mgc: 8.477851 ustep: 1 
iter: 2  mgc: 6.935757e-10 
iter: 1  value: -68669.87 mgc: 3.845792 ustep: 1 
iter: 2  mgc: 4.376685e-10 
iter: 1  mgc: 4.376685e-10 
outer mgc:  352.6059 
iter: 1  value: -68352.58 mgc: 1.532479 ustep: 1 
iter: 2  mgc: 4.647242e-10 
iter: 1  mgc: 4.647242e-10 
outer mgc:  551.481 
iter: 1  value: -67586.75 mgc: 5.21987 ustep: 1 
iter: 2  mgc: 2.604004e-10 
iter: 1  mgc: 2.604004e-10 
outer mgc:  1080.043 
iter: 1  value: -66837.57 mgc: 4.945023 ustep: 1 
iter: 2  mgc: 2.683539e-10 
iter: 1  mgc: 2.683539e-10 
outer mgc:  957.8976 
iter: 1  value: -66083.4 mgc: 5.286865 ustep: 1 
iter: 2  mgc: 3.328625e-10 
iter: 1  mgc: 3.328625e-10 
outer mgc:  1013.409 
iter: 1  value: -64501.67 mgc: 9.936551 ustep: 1 
iter: 2  mgc: 2.49341e-10 
iter: 1  value: -65369.37 mgc: 5.06941 ustep: 1 
iter: 2  mgc: 3.290775e-10 
iter: 1  mgc: 3.290775e-10 
outer mgc:  925.2886 
iter: 1  value: -66213.15 mgc: 15.46685 ustep: 1 
iter: 2  mgc: 2.464284e-10 
iter: 1  value: -65345.67 mgc: 1.529425 ustep: 1 
iter: 2  mgc: 3.323826e-10 
iter: 1  mgc: 3.323826e-10 
outer mgc:  209.0883 
iter: 1  value: -65226.42 mgc: 0.9108298 ustep: 1 
iter: 2  mgc: 3.313009e-10 
iter: 1  mgc: 3.313009e-10 
outer mgc:  332.3073 
iter: 1  value: -64919.79 mgc: 2.214314 ustep: 1 
iter: 2  mgc: 2.278386e-10 
iter: 1  mgc: 2.278386e-10 
outer mgc:  466.0132 
iter: 1  value: -64618.09 mgc: 2.373353 ustep: 1 
iter: 2  mgc: 3.440844e-10 
iter: 1  mgc: 3.440844e-10 
outer mgc:  423.7436 
iter: 1  value: -64022.02 mgc: 4.214684 ustep: 1 
iter: 2  mgc: 5.052083e-10 
iter: 1  value: -64399.65 mgc: 2.191801 ustep: 1 
iter: 2  mgc: 2.773727e-10 
iter: 1  mgc: 2.773727e-10 
outer mgc:  817.048 
iter: 1  value: -64162.1 mgc: 2.386962 ustep: 1 
iter: 2  mgc: 2.187322e-10 
iter: 1  mgc: 2.187322e-10 
outer mgc:  343.7403 
iter: 1  value: -63921.78 mgc: 2.114002 ustep: 1 
iter: 2  mgc: 3.450569e-10 
iter: 1  mgc: 3.450569e-10 
outer mgc:  721.8586 
iter: 1  value: -63672.56 mgc: 2.176991 ustep: 1 
iter: 2  mgc: 2.604687e-10 
iter: 1  mgc: 2.604687e-10 
outer mgc:  246.5805 
iter: 1  value: -63448.67 mgc: 2.239606 ustep: 1 
iter: 2  mgc: 2.81901e-10 
iter: 1  value: -63625.87 mgc: 1.001333 ustep: 1 
iter: 2  mgc: 4.124118e-10 
iter: 1  mgc: 4.124118e-10 
outer mgc:  376.0985 
iter: 1  value: -63545.56 mgc: 0.8541346 ustep: 1 
iter: 2  mgc: 2.994442e-10 
iter: 1  mgc: 2.994442e-10 
outer mgc:  136.2802 
iter: 1  value: -63355.43 mgc: 1.007209 ustep: 1 
iter: 2  mgc: 4.082625e-10 
iter: 1  mgc: 4.082625e-10 
outer mgc:  309.3411 
iter: 1  value: -62948.98 mgc: 2.205252 ustep: 1 
iter: 2  mgc: 2.324338e-10 
iter: 1  mgc: 2.324338e-10 
outer mgc:  262.2159 
iter: 1  value: -62550.42 mgc: 2.638659 ustep: 1 
iter: 2  mgc: 2.708651e-10 
iter: 1  mgc: 2.708651e-10 
outer mgc:  328.5714 
iter: 1  value: -61791.3 mgc: 4.229735 ustep: 1 
iter: 2  mgc: 3.321833e-10 
iter: 1  mgc: 3.321833e-10 
outer mgc:  903.8067 
iter: 1  value: -61939.52 mgc: 2.950892 ustep: 1 
iter: 2  mgc: 2.369633e-10 
iter: 1  value: -61824.46 mgc: 2.282817 ustep: 1 
iter: 2  mgc: 4.508131e-10 
iter: 1  mgc: 4.508131e-10 
outer mgc:  494.3897 
iter: 1  value: -61925.68 mgc: 1.216216 ustep: 1 
iter: 2  mgc: 2.96957e-10 
iter: 1  mgc: 2.96957e-10 
outer mgc:  140.0924 
iter: 1  value: -62011.96 mgc: 1.328272 ustep: 1 
iter: 2  mgc: 2.41796e-10 
iter: 1  value: -61936.81 mgc: 1.011005 ustep: 1 
iter: 2  mgc: 2.449695e-10 
iter: 1  value: -61912.91 mgc: 0.5805112 ustep: 1 
iter: 2  mgc: 2.676226e-10 
iter: 1  mgc: 2.676226e-10 
outer mgc:  153.876 
iter: 1  value: -61921.79 mgc: 0.462471 ustep: 1 
iter: 2  mgc: 2.969389e-10 
iter: 1  mgc: 2.969389e-10 
outer mgc:  82.6039 
iter: 1  value: -61946.73 mgc: 0.5862005 ustep: 1 
iter: 2  mgc: 3.743371e-10 
iter: 1  mgc: 3.743371e-10 
outer mgc:  133.5743 
iter: 1  value: -62042.95 mgc: 0.6533438 ustep: 1 
iter: 2  mgc: 2.952732e-10 
iter: 1  value: -62171.55 mgc: 0.3773059 ustep: 1 
iter: 2  mgc: 3.023018e-10 
iter: 1  value: -62673.12 mgc: 1.504421 ustep: 1 
iter: 2  mgc: 2.886596e-10 
iter: 1  value: -63868.88 mgc: 3.754704 ustep: 1 
iter: 2  mgc: 3.745622e-10 
iter: 1  mgc: 3.745622e-10 
outer mgc:  612.193 
iter: 1  value: -65437.46 mgc: 9.034927 ustep: 1 
iter: 2  mgc: 2.794174e-10 
iter: 1  value: -64395.55 mgc: 4.677492 ustep: 1 
iter: 2  mgc: 2.625661e-10 
iter: 1  value: -64050.13 mgc: 3.334225 ustep: 1 
iter: 2  mgc: 2.714607e-10 
iter: 1  value: -63862.54 mgc: 2.624652 ustep: 1 
iter: 2  mgc: 3.228198e-10 
iter: 1  value: -63863.1 mgc: 1.115925 ustep: 1 
iter: 2  mgc: 4.370505e-10 
iter: 1  mgc: 4.370505e-10 
outer mgc:  158.8221 
iter: 1  value: -63824.59 mgc: 0.8721731 ustep: 1 
iter: 2  mgc: 2.093186e-10 
iter: 1  mgc: 2.093186e-10 
outer mgc:  220.0147 
iter: 1  value: -63884.53 mgc: 0.8188085 ustep: 1 
iter: 2  mgc: 2.744203e-10 
iter: 1  mgc: 2.744203e-10 
outer mgc:  115.7199 
iter: 1  value: -64011.85 mgc: 0.868796 ustep: 1 
iter: 2  mgc: 3.284606e-10 
iter: 1  value: -64187.32 mgc: 0.6777491 ustep: 1 
iter: 2  mgc: 5.255924e-10 
iter: 1  value: -64795.57 mgc: 2.394092 ustep: 1 
iter: 2  mgc: 4.530853e-10 
iter: 1  value: -65765.02 mgc: 3.929205 ustep: 1 
iter: 2  mgc: 2.573946e-10 
iter: 1  mgc: 2.573946e-10 
outer mgc:  438.6278 
iter: 1  value: -64057.09 mgc: 6.854639 ustep: 1 
iter: 2  mgc: 2.514074e-10 
iter: 1  mgc: 2.514074e-10 
outer mgc:  654.6649 
iter: 1  value: -60956.45 mgc: 14.02266 ustep: 1 
iter: 2  mgc: 1.424541e-10 
iter: 1  value: -62601.7 mgc: 7.608922 ustep: 1 
iter: 2  mgc: 2.633885e-10 
iter: 1  value: -63378.99 mgc: 4.801106 ustep: 1 
iter: 2  mgc: 3.396817e-10 
iter: 1  value: -64011.86 mgc: 2.87066 ustep: 1 
iter: 2  mgc: 2.963552e-10 
iter: 1  value: -64047.73 mgc: 1.104716 ustep: 1 
iter: 2  mgc: 2.757726e-10 
iter: 1  mgc: 2.757726e-10 
outer mgc:  140.2467 
iter: 1  value: -63985.2 mgc: 0.642881 ustep: 1 
iter: 2  mgc: 2.435552e-10 
iter: 1  value: -63911.75 mgc: 0.7266442 ustep: 1 
iter: 2  mgc: 2.341634e-10 
iter: 1  mgc: 2.341634e-10 
outer mgc:  325.5711 
iter: 1  value: -63432.58 mgc: 2.43794 ustep: 1 
iter: 2  mgc: 3.859891e-10 
iter: 1  mgc: 3.859891e-10 
outer mgc:  125.2167 
iter: 1  value: -62953.67 mgc: 2.429016 ustep: 1 
iter: 2  mgc: 2.90895e-10 
iter: 1  mgc: 2.90895e-10 
outer mgc:  227.417 
iter: 1  value: -63193.92 mgc: 1.448804 ustep: 1 
iter: 2  mgc: 4.554805e-10 
iter: 1  mgc: 4.554805e-10 
outer mgc:  118.1006 
iter: 1  value: -63534.21 mgc: 2.132183 ustep: 1 
iter: 2  mgc: 2.632419e-10 
iter: 1  mgc: 2.632419e-10 
outer mgc:  109.96 
iter: 1  value: -63045.53 mgc: 2.085937 ustep: 1 
iter: 2  mgc: 3.23052e-10 
iter: 1  mgc: 3.23052e-10 
outer mgc:  57.2044 
iter: 1  value: -62693.79 mgc: 4.712067 ustep: 1 
iter: 2  mgc: 3.515227e-10 
iter: 1  mgc: 3.515227e-10 
outer mgc:  119.8783 
iter: 1  value: -61899.9 mgc: 5.652998 ustep: 1 
iter: 2  mgc: 3.184205e-10 
iter: 1  mgc: 3.184205e-10 
outer mgc:  154.2632 
iter: 1  value: -62252.54 mgc: 3.841549 ustep: 1 
iter: 2  mgc: 1.887158e-10 
iter: 1  mgc: 1.887158e-10 
outer mgc:  55.27354 
iter: 1  value: -62024.4 mgc: 6.237846 ustep: 1 
iter: 2  mgc: 2.705475e-10 
iter: 1  value: -62218.38 mgc: 1.192002 ustep: 1 
iter: 2  mgc: 1.912811e-10 
iter: 1  value: -62252.37 mgc: 0.3531814 ustep: 1 
iter: 2  mgc: 2.474484e-10 
iter: 1  value: -62252.61 mgc: 0.08934513 ustep: 1 
iter: 2  mgc: 3.306857e-10 
iter: 1  mgc: 3.306857e-10 
outer mgc:  6.476595 
iter: 1  value: -62253 mgc: 0.05571886 ustep: 1 
iter: 2  mgc: 3.030788e-10 
iter: 1  value: -62253.77 mgc: 0.1077552 ustep: 1 
iter: 2  mgc: 3.439878e-10 
iter: 1  mgc: 3.439878e-10 
outer mgc:  21.79516 
iter: 1  value: -62240.84 mgc: 0.3308404 ustep: 1 
iter: 2  mgc: 2.978206e-10 
iter: 1  value: -62215.76 mgc: 0.6108014 ustep: 1 
iter: 2  mgc: 2.269095e-10 
iter: 1  value: -62132.73 mgc: 2.042971 ustep: 1 
iter: 2  mgc: 3.057897e-10 
iter: 1  mgc: 3.057897e-10 
outer mgc:  44.56986 
iter: 1  value: -62066.44 mgc: 3.320461 ustep: 1 
iter: 2  mgc: 2.559541e-10 
iter: 1  value: -62107.08 mgc: 1.348317 ustep: 1 
iter: 2  mgc: 2.102324e-10 
iter: 1  value: -62120.61 mgc: 0.7004011 ustep: 1 
iter: 2  mgc: 2.080284e-10 
iter: 1  value: -62127.65 mgc: 0.3637919 ustep: 1 
iter: 2  mgc: 1.931999e-10 
iter: 1  value: -62131.6 mgc: 0.1746622 ustep: 1 
iter: 2  mgc: 2.419297e-10 
iter: 1  value: -62133.08 mgc: 0.0882984 ustep: 1 
iter: 2  mgc: 2.200989e-10 
iter: 1  mgc: 2.200989e-10 
outer mgc:  13.23544 
iter: 1  value: -62132.99 mgc: 0.07512803 ustep: 1 
iter: 2  mgc: 3.06438e-10 
iter: 1  mgc: 3.06438e-10 
outer mgc:  1.856443 
iter: 1  value: -62135.3 mgc: 0.122534 ustep: 1 
iter: 2  mgc: 1.254073e-10 
iter: 1  mgc: 1.254073e-10 
outer mgc:  4.861209 
iter: 1  value: -62133.6 mgc: 0.2338195 ustep: 1 
iter: 2  mgc: 1.792721e-10 
iter: 1  value: -62129.53 mgc: 0.5205236 ustep: 1 
iter: 2  mgc: 3.114428e-10 
iter: 1  mgc: 3.114428e-10 
outer mgc:  0.477143 
iter: 1  value: -62142.32 mgc: 0.428436 ustep: 1 
iter: 2  mgc: 2.687873e-10 
iter: 1  mgc: 2.687873e-10 
outer mgc:  0.05835612 
iter: 1  value: -62136.58 mgc: 0.07102494 ustep: 1 
iter: 2  mgc: 2.663777e-10 
iter: 1  mgc: 2.663777e-10 
outer mgc:  0.01544044 
iter: 1  value: -62137.79 mgc: 0.01090378 ustep: 1 
iter: 2  mgc: 1.901702e-10 
iter: 1  mgc: 1.901702e-10 
outer mgc:  0.002371579 
iter: 1  value: -62137.81 mgc: 0.003216385 ustep: 1 
iter: 2  mgc: 4.41437e-10 
iter: 1  mgc: 1.901702e-10 
   user  system elapsed 
889.636 883.632 733.861 

> # get the estimated values
> Report <- Obj$report()

> system.time(sdrep <- sdreport(Obj, getJointPrecision = T))
iter: 1  mgc: 1.901702e-10 
outer mgc:  0.002371579 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 2.636997e-10 
outer mgc:  46.46581 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 2.496995e-10 
outer mgc:  46.46547 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 1.655819e-10 
outer mgc:  46.56886 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 2.515653e-10 
outer mgc:  46.56463 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 2.494601e-10 
outer mgc:  46.90532 
iter: 1  value: -62137.77 mgc: 0.104836 ustep: 1 
iter: 2  mgc: 2.123203e-10 
outer mgc:  46.91007 
iter: 1  value: -62148.56 mgc: 0.02901827 ustep: 1 
iter: 2  mgc: 2.309774e-10 
outer mgc:  0.3411763 
iter: 1  value: -62127.02 mgc: 0.02898927 ustep: 1 
iter: 2  mgc: 1.968952e-10 
outer mgc:  0.3434971 
iter: 1  value: -62137.92 mgc: 0.0004802361 ustep: 1 
iter: 2  mgc: 1.472595e-10 
outer mgc:  0.1797639 
iter: 1  value: -62137.67 mgc: 0.0004792121 ustep: 1 
iter: 2  mgc: 3.301079e-10 
outer mgc:  0.1800961 
iter: 1  value: -62137.15 mgc: 0.01603079 ustep: 1 
iter: 2  mgc: 2.439042e-10 
outer mgc:  0.1648861 
iter: 1  value: -62138.43 mgc: 0.01604428 ustep: 1 
iter: 2  mgc: 2.913444e-10 
outer mgc:  0.1638462 
iter: 1  value: -62136.79 mgc: 0.05794956 ustep: 1 
iter: 2  mgc: 1.688914e-10 
outer mgc:  3.305918 
iter: 1  value: -62138.79 mgc: 0.05806558 ustep: 1 
iter: 2  mgc: 2.16459e-10 
outer mgc:  3.306658 
   user  system elapsed 
140.584 132.836 112.878 

> Q <- sdrep$jointPrecision[row.names(sdrep$jointPrecision) == "phi", 
+                           row.names(sdrep$jointPrecision) == "phi"]

> # 573.485(858.640) + 89.754(247.460) = 663.239(1106.100)
> 
> # save the results
> save(list=ls(), file="~/Documents/re_simulations/inla/model_resul ..." ... [TRUNCATED] 

> sink(type="message")

> sink()
