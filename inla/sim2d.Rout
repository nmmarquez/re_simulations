
> sink(output_file, type="message")

> pacman::p_load(INLA, ggplot2, data.table, lattice, TMB, ar.matrix)

> set.seed(123)

> # compare the INLA Q matrix vs the by hand to make sure we are on the same page
> # use inla to create the model and make sure results match TMB
> 
 .... [TRUNCATED] 

> n <- 500 # number of observations on the grid

> m <- 12 # number of time points

> loc <- matrix(runif(n*2), n, 2) # simulate observed points

> mesh <- inla.mesh.create(loc, refine=list(max.edge=0.05)) # create mesh

> jpeg("~/Documents/re_simulations/inla/mesh.jpg")

> par(mfrow=c(1,1))

> plot(mesh)

> points(loc[,1], loc[,2], col="red", pch=20)

> dev.off()
RStudioGD 
        2 

> # project mesh using inla default projection
> proj <- inla.mesh.projector(mesh)

> sigma0 <-  .3   # Standard deviation

> range0 <- 1. # Spatial range

> kappa0 <- sqrt(8)/range0 # inla paramter transform

> tau0 <- 1/(sqrt(4*pi)*kappa0*sigma0) # inla parameter transform

> rho <- .91 # tenporal autocorrelation

> spde <- inla.spde2.matern(mesh) # create the spde from the mesh

> # parameterize the spde and get the projected precision matrix
> Q1 <- inla.spde2.precision(spde, theta=c(log(tau0), log(kappa0)))
Note: method with signature ‘diagonalMatrix#sparseMatrix’ chosen for function ‘%*%’,
 target signature ‘ddiMatrix#dgTMatrix’.
 "Matrix#TsparseMatrix" would also be valid
Note: method with signature ‘TsparseMatrix#Matrix’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#ddiMatrix’.
 "sparseMatrix#diagonalMatrix" would also be valid

> # calculate the precision matrix by hand in order to make sure you got the
> # process down for TMB
> Q2 <- tau0**2 * (kappa0**4 * spde$param.inla$M .... [TRUNCATED] 

> # Should all be equal
> print(all.equal(Q1, Q2))
[1] TRUE

> # # simulate m sets from the precision matrix had no idea INLA had this!!!
> # x.m <- inla.qsample(n=m, Q1)
> # 
> # # use the janky sim code found  .... [TRUNCATED] 
Note: method with signature ‘dsparseMatrix#dsparseMatrix’ chosen for function ‘kronecker’,
 target signature ‘dgTMatrix#dgCMatrix’.
 "TsparseMatrix#sparseMatrix" would also be valid

> x_ <- matrix(data=c(sim.AR(1, Q)), nrow=mesh$n, ncol=m)

> # lets only take the observed mesh not the whole set
> x <- x_[mesh$idx$loc,]

> # plot using the above websites code
> c100 <- rainbow(101)

> jpeg("~/Documents/re_simulations/inla/pointplot.jpg")

> par(mfrow=c(4,3), mar=c(0,0,0,0))

> for (j in 1:m)
+     plot(loc, col=c100[round(100*(x[,j]-min(x[,j]))/diff(range(x[,j])))], 
+          axes=FALSE, asp=1, pch=19, cex=0.5)

> dev.off()
RStudioGD 
        2 

> # plot using our use defined code to see the whole surface
> for (j in 1:m){
+    print(plot_mesh_sim(x_[,j], proj) + labs(title=paste0("Time: ", j) .... [TRUNCATED] 

> # lets build up a linear model with dummies to estimate
> table(ccov <- factor(sample(LETTERS[1:3], n*m, replace=TRUE)) )

   A    B    C 
2050 1969 1981 

> beta <- -1:1

> sd.y <- 0.1

> y <- beta[unclass(ccov)] + x + rnorm(n*m, 0, sd.y)

> tapply(y, ccov, mean)
         A          B          C 
-0.8004841  0.2047530  1.2052436 

> isel <- sample(1:(n*m), n*m/2)

> dat <- data.table(y=as.vector(y), w=ccov, 
+                   time=rep(1:m, each=n) - 1, 
+                   xcoo=rep(loc[,1], m), 
+              .... [TRUNCATED] 

> # build the inla stuff that Im not 100 % sure what it does but theres a 
> # projector matrix and some priors and the most stacked lists uve ever se .... [TRUNCATED] 

> A <- inla.spde.make.A(mesh=mesh, 
+                       loc=cbind(dat$xcoo, dat$ycoo), 
+                       group=dat$time+1) 

> sdat <- inla.stack(tag='stdata', data=list(y=dat$y), 
+                    A=list(A,1),  effects=list(iset, w=dat$w)) 

> h.spec <- list(theta=list(prior='pccor1', param=c(0, 0.9)))

> formulae <- y ~ 0 + w + 
+     f(i, model=spde, group=i.group, 
+       control.group=list(model='ar1', hyper=h.spec)) 

> prec.prior <- list(prior='pc.prec', param=c(1, 0.01))

> # Run the inla model and time it
> print(system.time(res <- inla(formulae,  data=inla.stack.data(sdat),
+                     control.predictor=list .... [TRUNCATED] 
Note: method with signature ‘CsparseMatrix#Matrix#missing#replValue’ chosen for function ‘[<-’,
 target signature ‘dgCMatrix#ngCMatrix#missing#numeric’.
 "Matrix#nsparseMatrix#missing#replValue" would also be valid
Note: method with signature ‘Matrix#numLike’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#numeric’.
 "TsparseMatrix#ANY" would also be valid
Note: method with signature ‘sparseMatrix#matrix’ chosen for function ‘%*%’,
 target signature ‘dgTMatrix#matrix’.
 "TsparseMatrix#ANY" would also be valid
